import Foundation

struct Quote: Codable {
    let text: String
    let author: String
}

if CommandLine.arguments.count != 3 {
    print("Usage: ConvertJSONToSwift.swift <input-json> <output-swift>")
    exit(1)
}

let inputPath = CommandLine.arguments[1]
let outputPath = CommandLine.arguments[2]

let inputURL = URL(fileURLWithPath: inputPath)
let outputURL = URL(fileURLWithPath: outputPath)

func escapeForSwift(_ string: String) -> String {
    string
        .replacingOccurrences(of: "\\", with: "\\\\")
        .replacingOccurrences(of: "\"", with: "\\\"")
        .replacingOccurrences(of: "\n", with: "\\n")
        .replacingOccurrences(of: "\r", with: "\\r")
        .replacingOccurrences(of: "\t", with: "\\t")
        .components(separatedBy: .controlCharacters).joined()
}

do {
    let data = try Data(contentsOf: inputURL)
    let quoteDatabase = try JSONDecoder().decode([String: [Quote]].self, from: data)

    guard let quotes = quoteDatabase["quotes"] else {
        print("⚠️ JSON does not contain 'quotes' key.")
        exit(1)
    }

    let chunkSize = 1000
    let chunks = stride(from: 0, to: quotes.count, by: chunkSize).map {
        Array(quotes[$0..<min($0 + chunkSize, quotes.count)])
    }

    var lines: [String] = [
        "// This file is autogenerated. Do not edit directly.",
        "import Foundation",
        "",
        ""
    ]

    for (i, chunk) in chunks.enumerated() {
        lines.append("let embeddedQuotesChunk\(i + 1): [Quote] = [")
        for quote in chunk {
            let escapedText = escapeForSwift(quote.text)
            let escapedAuthor = escapeForSwift(quote.author)
            lines.append("    Quote(text: \"\(escapedText)\", author: \"\(escapedAuthor)\"),")
        }
        lines.append("]\n")
    }

    // Combine all chunks into a single array
    let allChunks = (1...chunks.count).map { "embeddedQuotesChunk\($0)" }.joined(separator: " + ")
    lines.append("let embeddedQuotes: [Quote] = \(allChunks)")

    let output = lines.joined(separator: "\n")
    try output.write(to: outputURL, atomically: true, encoding: .utf8)
    print("✅ Wrote \(quotes.count) quotes in \(chunks.count) chunks to \(outputPath)")

} catch {
    print("❌ Error: \(error.localizedDescription)")
    exit(1)
}
